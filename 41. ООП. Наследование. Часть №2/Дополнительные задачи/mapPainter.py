class Drawer:    def __init__(self, draw_map, cell_size):        colors = {1: 'black', 2: 'red', 3: 'orange',                  4: 'yellow', 5: 'green', 6: 'lightblue',                  7: 'blue', 8: 'violet', 9: 'white'}        colors = {}        self.draw_map = draw_map        self.cell_size = cell_size        self.color_numbers = dict()        for n in self.numbers():            self.color_numbers[n] = colors.get(n, 'black')     def numbers(self):        return sorted(list(set(n for row in self.draw_map for n in row)))     def set_color(self, number, color):        self.color_numbers[number] = color     def set_cell_size(self, cell_size):        self.cell_size = cell_size     def size(self):        return max(len(row) for row in self.draw_map) * self.cell_size,\                len(self.draw_map) * self.cell_size     def draw(self):        from PIL import Image, ImageDraw        im = Image.new('RGB', self.size())        drawer = ImageDraw.Draw(im)        for y in range(len(self.draw_map)):            for x in range(len(self.draw_map[y])):                drawer.rectangle(                    (x * self.cell_size, y * self.cell_size,                     (x + 1) * self.cell_size, (y + 1) * self.cell_size),                    self.color_numbers[self.draw_map[y][x]])        return im        