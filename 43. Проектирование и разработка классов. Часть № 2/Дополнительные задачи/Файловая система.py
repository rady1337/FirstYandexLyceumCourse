class FileSystem:    def __init__(self):        self.root_dir = Dirrectory('.')    def make_dirrectory(self, dir_name):        last_dir = self.root_dir        for i in dir_name.split('/'):            d = last_dir.get_dirrectory(i)            if d is not None:                last_dir = d            else:                last_dir = last_dir.add_dirrectory(i)    def print(self, dir_name):        last_dir = self.root_dir        for i in dir_name.split('/'):            d = last_dir.get_dirrectory(i)            if d is not None:                last_dir = d            else:                print('Директория', dir_name, 'не существует')                return False        last_dir.print()        return True    def save_file(self, file_name, str):        s = file_name.split('/')        fn = s[-1]        del s[-1]        last_dir = self.root_dir        for i in s:            d = last_dir.get_dirrectory(i)            if d is not None:                last_dir = d            else:                print('Директория', '/'.join(s), ' не существует')                return False        last_dir.save_file(fn, str)        return True    def read_file(self, file_name):        s = file_name.split('/')        fn = s[-1]        del s[-1]        last_dir = self.root_dir        for i in s:            d = last_dir.get_dirrectory(i)            if d is not None:                last_dir = d            else:                print('Директория', '/'.join(s), 'не существует')                return False        ss = last_dir.read_file(fn)        if ss is not None:            return ss        print('Файл', file_name, 'не существует')        return True            class Dirrectory:    def __init__(self, name):        self.name = name        self.dirrectories = {}        self.files = {}            def get_name(self):        return self.name        def get_dirrectory(self, dir_name):        if dir_name in self.dirrectories:            return self.dirrectories[dir_name]        def read_file(self, file_name):        if file_name in self.files:            return self.files[file_name]        def add_dirrectory(self, dir_name):        if dir_name not in self.dirrectories:            d = Dirrectory(dir_name)            self.dirrectories[dir_name] = d        return d                def save_file(self, file_name, str):        self.files[file_name] = str            def print(self):        if len(self.dirrectories) > 0:            print('Директории:')            print('\n'.join(sorted(self.dirrectories)))        if len(self.files) > 0:            print('Файлы:')            print('\n'.join(sorted(self.files)))        def main():    help = '''Комманды:      mkdir *путь/имя директории* - создание новой дирректории     help - этот текст    ls *путь/имя диркектории* - выводиться список файлов и поддиректорий    touch *путь/имя файла* +*текст файла* - записать текст в txt файл    cat *путь/имя файла* - прочитать txt файл    exit - выйти из данной программыПримеры:    mkdir aaa    mkdir aaa/bbb    mkdir aaa/ccc    ls aaa    ls aaa/bbb    touch 123.txt +этот текст    touch aaa/1.txt +этот текст2    cat 123.txt    cat aaa/1.txt    '''    fs = FileSystem()    print(help)    while True:        com = input('Комманда: ')        if com.strip() == 'exit':            break        if com.startswith('mkdir'):            add_dir = com.split('mkdir ')[1].strip()            fs.make_dirrectory(add_dir)        elif com.startswith('ls'):            if len(com) > 2:                ls_dir = com.split('ls ')[1].strip()                fs.print(ls_dir)            else:                fs.print('')                        elif com.startswith('touch '):            ls_dir = com.split('touch ')[1]            ls_dir, text = ls_dir.split(' +')[0], ls_dir.split('+')[1]            fs.save_file(ls_dir, text)        elif com.startswith('cat '):            cat_dir = com.split('cat ')[1].strip()            print(fs.read_file(cat_dir))        elif com.startswith('help'):            print(help)        else:            print('Неизвестная комманда!\nНапишите "help"')main()