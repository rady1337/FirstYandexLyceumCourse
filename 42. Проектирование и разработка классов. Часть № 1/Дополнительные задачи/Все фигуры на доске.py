WHITE = 1BLACK = 2class Figure:    def __init__(self, color):        self.color = color    def get_color(self):        return self.colordef opponent(color):    if color == WHITE:        return BLACK    else:        return WHITEdef print_board(board):  # Распечатать доску в текстовом виде    print('     +----+----+----+----+----+----+----+----+')    for row in range(7, -1, -1):        print(' ', row, end='  ')        for col in range(8):            print('|', board.cell(row, col), end=' ')        print('|')        print('     +----+----+----+----+----+----+----+----+')    print(end='        ')    for col in range(8):        print(col, end='    ')    print()def correct_coords(row, col):    return 0 <= row < 8 and 0 <= col < 8class Board:    def __init__(self):        self.color = WHITE        self.field = []        for row in range(8):            self.field.append([None] * 8)        self.field[0] = [            Rook(WHITE), Knight(WHITE), Bishop(WHITE), Queen(WHITE),            King(WHITE), Bishop(WHITE), Knight(WHITE), Rook(WHITE)        ]        self.field[1] = [            Pawn(WHITE), Pawn(WHITE), Pawn(WHITE), Pawn(WHITE),            Pawn(WHITE), Pawn(WHITE), Pawn(WHITE), Pawn(WHITE)        ]        self.field[6] = [            Pawn(BLACK), Pawn(BLACK), Pawn(BLACK), Pawn(BLACK),            Pawn(BLACK), Pawn(BLACK), Pawn(BLACK), Pawn(BLACK)        ]        self.field[7] = [            Rook(BLACK), Knight(BLACK), Bishop(BLACK), Queen(BLACK),            King(BLACK), Bishop(BLACK), Knight(BLACK), Rook(BLACK)        ]    def current_player_color(self):        return self.color    def cell(self, row, col):        piece = self.field[row][col]        if piece is None:            return '  '        color = piece.get_color()        c = 'w' if color == WHITE else 'b'        return c + piece.char()    def get_piece(self, row, col):        if correct_coords(row, col):            return self.field[row][col]    def move_piece(self, row, col, row1, col1):        if not correct_coords(row, col) or not correct_coords(row1, col1):            return False        if row == row1 and col == col1:            return False        piece = self[row][col]        if piece is None or piece.get_color() != self.color:            return False        if self[row1][col1] is None:            if not piece.can_move(self, row, col, row1, col1):                return False        elif self[row1][col1].get_color() == opponent(piece.get_color()):            if not piece.can_attack(self, row, col, row1, col1):                return False        else:            return False        self.field[row][col] = None        self.field[row1][col1] = piece        self.color = opponent(self.color)        return True    def __getitem__(self, row, col):        return self.field[row][col]    def __setitem__(self, row, col, value):        self.field[row][col] = valueclass Rook(Figure):    def char(self):        return 'R'    def can_move(self, board, row, col, row1, col1):        if row != row1 and col != col1:            return False        step = 1 if (row1 >= row) else -1        for r in range(row + step, row1, step):            if not (board.get_piece(r, col) is None):                return False        step = 1 if (col1 >= col) else -1        for c in range(col + step, col1, step):            if not (board.get_piece(row, c) is None):                return False        return True    def can_attack(self, board, row, col, row1, col1):        return self.can_move(board, row, col, row1, col1)class Pawn(Figure):    def char(self):        return 'P'    def can_move(self, board, row, col, row1, col1):        if col != col1:            return False        if self.color == WHITE:            direction = 1            start_row = 1        else:            direction = -1            start_row = 6        if row + direction == row1:            return True        if (row == start_row                and row + 2 * direction == row1                and board.field[row + direction][col] is None):            return True        return False    def can_attack(self, board, row, col, row1, col1):        return self.can_move(board, row, col, row1, col1)        # direction = 1 if (self.color == WHITE) else -1        # return (row + direction == row1        #        and (col + 1 == col1 or col - 1 == col1))class Knight(Figure):    def char(self):        return 'N'    def can_move(self, board, row, col, row1, col1):        if not (correct_coords(row, col) or correct_coords(row1, col1)):            return False        return True    def can_attack(self, board, row, col, row1, col1):        return self.can_move(self, board, row, col, row1, col1)class King(Figure):    def char(self):        return 'K'    def can_move(self, board, row, col, row1, col1):        if not (correct_coords(row, col) or correct_coords(row1, col1)):            return False        if self.color == WHITE:            direction = 1        else:            direction = -1    def can_attack(self, board, row, col, row1, col1):        return self.can_move(self, board, row, col, row1, col1)class Queen(Figure):    def char(self):        return 'Q'    def can_move(self, board, row, col, row1, col1):        return True  # Заглушка    def can_attack(self, board, row, col, row1, col1):        return self.can_move(self, board, row, col, row1, col1)class Bishop(Figure):    def char(self):        return 'B'    def can_move(self, board, row, col, row1, col1):        return True  # Заглушка    def can_attack(self, board, row, col, row1, col1):        return self.can_move(self, board, row, col, row1, col1)